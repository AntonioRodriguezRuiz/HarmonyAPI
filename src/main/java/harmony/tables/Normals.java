/*
 * This file is generated by jOOQ.
 */
package src.main.java.harmony.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import src.main.java.harmony.Harmony;
import src.main.java.harmony.Keys;
import src.main.java.harmony.tables.records.NormalsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Normals extends TableImpl<NormalsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>harmony.normals</code>
     */
    public static final Normals NORMALS = new Normals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NormalsRecord> getRecordType() {
        return NormalsRecord.class;
    }

    /**
     * The column <code>harmony.normals.normalid</code>.
     */
    public final TableField<NormalsRecord, Integer> NORMALID = createField(DSL.name("normalid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>harmony.normals.userid</code>.
     */
    public final TableField<NormalsRecord, Integer> USERID = createField(DSL.name("userid"), SQLDataType.INTEGER.nullable(false), this, "");

    private Normals(Name alias, Table<NormalsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Normals(Name alias, Table<NormalsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>harmony.normals</code> table reference
     */
    public Normals(String alias) {
        this(DSL.name(alias), NORMALS);
    }

    /**
     * Create an aliased <code>harmony.normals</code> table reference
     */
    public Normals(Name alias) {
        this(alias, NORMALS);
    }

    /**
     * Create a <code>harmony.normals</code> table reference
     */
    public Normals() {
        this(DSL.name("normals"), null);
    }

    public <O extends Record> Normals(Table<O> child, ForeignKey<O, NormalsRecord> key) {
        super(child, key, NORMALS);
    }

    @Override
    public Schema getSchema() {
        return Harmony.HARMONY;
    }

    @Override
    public Identity<NormalsRecord, Integer> getIdentity() {
        return (Identity<NormalsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NormalsRecord> getPrimaryKey() {
        return Keys.KEY_NORMALS_PRIMARY;
    }

    @Override
    public List<UniqueKey<NormalsRecord>> getKeys() {
        return Arrays.<UniqueKey<NormalsRecord>>asList(Keys.KEY_NORMALS_PRIMARY, Keys.KEY_NORMALS_NORMALID, Keys.KEY_NORMALS_USERID);
    }

    @Override
    public List<ForeignKey<NormalsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NormalsRecord, ?>>asList(Keys.NORMALS_IBFK_1);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.NORMALS_IBFK_1);

        return _users;
    }

    @Override
    public Normals as(String alias) {
        return new Normals(DSL.name(alias), this);
    }

    @Override
    public Normals as(Name alias) {
        return new Normals(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Normals rename(String name) {
        return new Normals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Normals rename(Name name) {
        return new Normals(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
