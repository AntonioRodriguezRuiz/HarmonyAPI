/*
 * This file is generated by jOOQ.
 */
package src.main.java.harmony.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import src.main.java.harmony.Harmony;
import src.main.java.harmony.Indexes;
import src.main.java.harmony.Keys;
import src.main.java.harmony.tables.records.VideogameplatformsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Videogameplatforms extends TableImpl<VideogameplatformsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>harmony.videogameplatforms</code>
     */
    public static final Videogameplatforms VIDEOGAMEPLATFORMS = new Videogameplatforms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VideogameplatformsRecord> getRecordType() {
        return VideogameplatformsRecord.class;
    }

    /**
     * The column <code>harmony.videogameplatforms.videogamePlatformid</code>.
     */
    public final TableField<VideogameplatformsRecord, Integer> VIDEOGAMEPLATFORMID = createField(DSL.name("videogamePlatformid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>harmony.videogameplatforms.videogameid</code>.
     */
    public final TableField<VideogameplatformsRecord, Integer> VIDEOGAMEID = createField(DSL.name("videogameid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>harmony.videogameplatforms.platformid</code>.
     */
    public final TableField<VideogameplatformsRecord, Integer> PLATFORMID = createField(DSL.name("platformid"), SQLDataType.INTEGER.nullable(false), this, "");

    private Videogameplatforms(Name alias, Table<VideogameplatformsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Videogameplatforms(Name alias, Table<VideogameplatformsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>harmony.videogameplatforms</code> table reference
     */
    public Videogameplatforms(String alias) {
        this(DSL.name(alias), VIDEOGAMEPLATFORMS);
    }

    /**
     * Create an aliased <code>harmony.videogameplatforms</code> table reference
     */
    public Videogameplatforms(Name alias) {
        this(alias, VIDEOGAMEPLATFORMS);
    }

    /**
     * Create a <code>harmony.videogameplatforms</code> table reference
     */
    public Videogameplatforms() {
        this(DSL.name("videogameplatforms"), null);
    }

    public <O extends Record> Videogameplatforms(Table<O> child, ForeignKey<O, VideogameplatformsRecord> key) {
        super(child, key, VIDEOGAMEPLATFORMS);
    }

    @Override
    public Schema getSchema() {
        return Harmony.HARMONY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VIDEOGAMEPLATFORMS_PLATFORMID);
    }

    @Override
    public Identity<VideogameplatformsRecord, Integer> getIdentity() {
        return (Identity<VideogameplatformsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<VideogameplatformsRecord> getPrimaryKey() {
        return Keys.KEY_VIDEOGAMEPLATFORMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<VideogameplatformsRecord>> getKeys() {
        return Arrays.<UniqueKey<VideogameplatformsRecord>>asList(Keys.KEY_VIDEOGAMEPLATFORMS_PRIMARY, Keys.KEY_VIDEOGAMEPLATFORMS_VIDEOGAMEPLATFORMID, Keys.KEY_VIDEOGAMEPLATFORMS_DUPLICATEDENTRY_VIDEOGAMEPLATFORMS);
    }

    @Override
    public List<ForeignKey<VideogameplatformsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VideogameplatformsRecord, ?>>asList(Keys.VIDEOGAMEPLATFORMS_IBFK_2, Keys.VIDEOGAMEPLATFORMS_IBFK_1);
    }

    private transient Videogames _videogames;
    private transient Platforms _platforms;

    public Videogames videogames() {
        if (_videogames == null)
            _videogames = new Videogames(this, Keys.VIDEOGAMEPLATFORMS_IBFK_2);

        return _videogames;
    }

    public Platforms platforms() {
        if (_platforms == null)
            _platforms = new Platforms(this, Keys.VIDEOGAMEPLATFORMS_IBFK_1);

        return _platforms;
    }

    @Override
    public Videogameplatforms as(String alias) {
        return new Videogameplatforms(DSL.name(alias), this);
    }

    @Override
    public Videogameplatforms as(Name alias) {
        return new Videogameplatforms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Videogameplatforms rename(String name) {
        return new Videogameplatforms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Videogameplatforms rename(Name name) {
        return new Videogameplatforms(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
