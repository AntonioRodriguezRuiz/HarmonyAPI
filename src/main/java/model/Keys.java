/*
 * This file is generated by jOOQ.
 */
package src.main.java.model;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import src.main.java.model.tables.Admins;
import src.main.java.model.tables.Books;
import src.main.java.model.tables.Episodes;
import src.main.java.model.tables.Genres;
import src.main.java.model.tables.Listmedia;
import src.main.java.model.tables.Lists;
import src.main.java.model.tables.Media;
import src.main.java.model.tables.Mediagenres;
import src.main.java.model.tables.Movies;
import src.main.java.model.tables.Normals;
import src.main.java.model.tables.People;
import src.main.java.model.tables.Peoplebooks;
import src.main.java.model.tables.Peopleepisodes;
import src.main.java.model.tables.Peoplemovies;
import src.main.java.model.tables.Peoplevideogames;
import src.main.java.model.tables.Platforms;
import src.main.java.model.tables.Reports;
import src.main.java.model.tables.Reviewlikes;
import src.main.java.model.tables.Reviews;
import src.main.java.model.tables.Seasons;
import src.main.java.model.tables.Series;
import src.main.java.model.tables.Trackers;
import src.main.java.model.tables.Users;
import src.main.java.model.tables.Videogameplatforms;
import src.main.java.model.tables.Videogames;
import src.main.java.model.tables.records.AdminsRecord;
import src.main.java.model.tables.records.BooksRecord;
import src.main.java.model.tables.records.EpisodesRecord;
import src.main.java.model.tables.records.GenresRecord;
import src.main.java.model.tables.records.ListmediaRecord;
import src.main.java.model.tables.records.ListsRecord;
import src.main.java.model.tables.records.MediaRecord;
import src.main.java.model.tables.records.MediagenresRecord;
import src.main.java.model.tables.records.MoviesRecord;
import src.main.java.model.tables.records.NormalsRecord;
import src.main.java.model.tables.records.PeopleRecord;
import src.main.java.model.tables.records.PeoplebooksRecord;
import src.main.java.model.tables.records.PeopleepisodesRecord;
import src.main.java.model.tables.records.PeoplemoviesRecord;
import src.main.java.model.tables.records.PeoplevideogamesRecord;
import src.main.java.model.tables.records.PlatformsRecord;
import src.main.java.model.tables.records.ReportsRecord;
import src.main.java.model.tables.records.ReviewlikesRecord;
import src.main.java.model.tables.records.ReviewsRecord;
import src.main.java.model.tables.records.SeasonsRecord;
import src.main.java.model.tables.records.SeriesRecord;
import src.main.java.model.tables.records.TrackersRecord;
import src.main.java.model.tables.records.UsersRecord;
import src.main.java.model.tables.records.VideogameplatformsRecord;
import src.main.java.model.tables.records.VideogamesRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * harmony.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdminsRecord> KEY_ADMINS_ADMINID = Internal.createUniqueKey(Admins.ADMINS, DSL.name("KEY_admins_adminid"), new TableField[] { Admins.ADMINS.ADMINID }, true);
    public static final UniqueKey<AdminsRecord> KEY_ADMINS_PRIMARY = Internal.createUniqueKey(Admins.ADMINS, DSL.name("KEY_admins_PRIMARY"), new TableField[] { Admins.ADMINS.ADMINID }, true);
    public static final UniqueKey<AdminsRecord> KEY_ADMINS_USERID = Internal.createUniqueKey(Admins.ADMINS, DSL.name("KEY_admins_userid"), new TableField[] { Admins.ADMINS.USERID }, true);
    public static final UniqueKey<BooksRecord> KEY_BOOKS_BOOKID = Internal.createUniqueKey(Books.BOOKS, DSL.name("KEY_books_bookid"), new TableField[] { Books.BOOKS.BOOKID }, true);
    public static final UniqueKey<BooksRecord> KEY_BOOKS_MEDIAID = Internal.createUniqueKey(Books.BOOKS, DSL.name("KEY_books_mediaid"), new TableField[] { Books.BOOKS.MEDIAID }, true);
    public static final UniqueKey<BooksRecord> KEY_BOOKS_PRIMARY = Internal.createUniqueKey(Books.BOOKS, DSL.name("KEY_books_PRIMARY"), new TableField[] { Books.BOOKS.BOOKID }, true);
    public static final UniqueKey<EpisodesRecord> KEY_EPISODES_DUPLICATEDENTRY_EPISODES = Internal.createUniqueKey(Episodes.EPISODES, DSL.name("KEY_episodes_duplicatedEntry_episodes"), new TableField[] { Episodes.EPISODES.SEASONID, Episodes.EPISODES.EPISODENO }, true);
    public static final UniqueKey<EpisodesRecord> KEY_EPISODES_EPISODEID = Internal.createUniqueKey(Episodes.EPISODES, DSL.name("KEY_episodes_episodeid"), new TableField[] { Episodes.EPISODES.EPISODEID }, true);
    public static final UniqueKey<EpisodesRecord> KEY_EPISODES_PRIMARY = Internal.createUniqueKey(Episodes.EPISODES, DSL.name("KEY_episodes_PRIMARY"), new TableField[] { Episodes.EPISODES.EPISODEID }, true);
    public static final UniqueKey<GenresRecord> KEY_GENRES_GENREID = Internal.createUniqueKey(Genres.GENRES, DSL.name("KEY_genres_genreid"), new TableField[] { Genres.GENRES.GENREID }, true);
    public static final UniqueKey<GenresRecord> KEY_GENRES_NAME = Internal.createUniqueKey(Genres.GENRES, DSL.name("KEY_genres_name"), new TableField[] { Genres.GENRES.NAME }, true);
    public static final UniqueKey<GenresRecord> KEY_GENRES_PRIMARY = Internal.createUniqueKey(Genres.GENRES, DSL.name("KEY_genres_PRIMARY"), new TableField[] { Genres.GENRES.GENREID }, true);
    public static final UniqueKey<ListmediaRecord> KEY_LISTMEDIA_DUPLICATEDENTRY_LISTMEDIA = Internal.createUniqueKey(Listmedia.LISTMEDIA, DSL.name("KEY_listmedia_duplicatedEntry_listmedia"), new TableField[] { Listmedia.LISTMEDIA.LISTID, Listmedia.LISTMEDIA.MEDIAID }, true);
    public static final UniqueKey<ListmediaRecord> KEY_LISTMEDIA_ELEMENTID = Internal.createUniqueKey(Listmedia.LISTMEDIA, DSL.name("KEY_listmedia_elementid"), new TableField[] { Listmedia.LISTMEDIA.ELEMENTID }, true);
    public static final UniqueKey<ListmediaRecord> KEY_LISTMEDIA_PRIMARY = Internal.createUniqueKey(Listmedia.LISTMEDIA, DSL.name("KEY_listmedia_PRIMARY"), new TableField[] { Listmedia.LISTMEDIA.ELEMENTID }, true);
    public static final UniqueKey<ListsRecord> KEY_LISTS_INVALIDLISTNAME = Internal.createUniqueKey(Lists.LISTS, DSL.name("KEY_lists_invalidListName"), new TableField[] { Lists.LISTS.USERID, Lists.LISTS.LISTNAME }, true);
    public static final UniqueKey<ListsRecord> KEY_LISTS_LISTID = Internal.createUniqueKey(Lists.LISTS, DSL.name("KEY_lists_listid"), new TableField[] { Lists.LISTS.LISTID }, true);
    public static final UniqueKey<ListsRecord> KEY_LISTS_PRIMARY = Internal.createUniqueKey(Lists.LISTS, DSL.name("KEY_lists_PRIMARY"), new TableField[] { Lists.LISTS.LISTID }, true);
    public static final UniqueKey<MediaRecord> KEY_MEDIA_MEDIAALREADYEXISTS = Internal.createUniqueKey(Media.MEDIA, DSL.name("KEY_media_mediaAlreadyExists"), new TableField[] { Media.MEDIA.TITLE, Media.MEDIA.RELEASEDATE }, true);
    public static final UniqueKey<MediaRecord> KEY_MEDIA_MEDIAID = Internal.createUniqueKey(Media.MEDIA, DSL.name("KEY_media_mediaid"), new TableField[] { Media.MEDIA.MEDIAID }, true);
    public static final UniqueKey<MediaRecord> KEY_MEDIA_PRIMARY = Internal.createUniqueKey(Media.MEDIA, DSL.name("KEY_media_PRIMARY"), new TableField[] { Media.MEDIA.MEDIAID }, true);
    public static final UniqueKey<MediagenresRecord> KEY_MEDIAGENRES_DUPLICATEDENTRY_MEDIAGENRES = Internal.createUniqueKey(Mediagenres.MEDIAGENRES, DSL.name("KEY_mediaGenres_duplicatedEntry_mediaGenres"), new TableField[] { Mediagenres.MEDIAGENRES.MEDIAID, Mediagenres.MEDIAGENRES.GENREID }, true);
    public static final UniqueKey<MediagenresRecord> KEY_MEDIAGENRES_MEDIAGENRESID = Internal.createUniqueKey(Mediagenres.MEDIAGENRES, DSL.name("KEY_mediaGenres_mediagenresid"), new TableField[] { Mediagenres.MEDIAGENRES.MEDIAGENRESID }, true);
    public static final UniqueKey<MediagenresRecord> KEY_MEDIAGENRES_PRIMARY = Internal.createUniqueKey(Mediagenres.MEDIAGENRES, DSL.name("KEY_mediaGenres_PRIMARY"), new TableField[] { Mediagenres.MEDIAGENRES.MEDIAGENRESID }, true);
    public static final UniqueKey<MoviesRecord> KEY_MOVIES_MEDIAID = Internal.createUniqueKey(Movies.MOVIES, DSL.name("KEY_movies_mediaid"), new TableField[] { Movies.MOVIES.MEDIAID }, true);
    public static final UniqueKey<MoviesRecord> KEY_MOVIES_PRIMARY = Internal.createUniqueKey(Movies.MOVIES, DSL.name("KEY_movies_PRIMARY"), new TableField[] { Movies.MOVIES.MOVIEID }, true);
    public static final UniqueKey<NormalsRecord> KEY_NORMALS_NORMALID = Internal.createUniqueKey(Normals.NORMALS, DSL.name("KEY_normals_normalid"), new TableField[] { Normals.NORMALS.NORMALID }, true);
    public static final UniqueKey<NormalsRecord> KEY_NORMALS_PRIMARY = Internal.createUniqueKey(Normals.NORMALS, DSL.name("KEY_normals_PRIMARY"), new TableField[] { Normals.NORMALS.NORMALID }, true);
    public static final UniqueKey<NormalsRecord> KEY_NORMALS_USERID = Internal.createUniqueKey(Normals.NORMALS, DSL.name("KEY_normals_userid"), new TableField[] { Normals.NORMALS.USERID }, true);
    public static final UniqueKey<PeopleRecord> KEY_PEOPLE_DUPLICATEDENTRY_PEOPLE = Internal.createUniqueKey(People.PEOPLE, DSL.name("KEY_people_duplicatedEntry_people"), new TableField[] { People.PEOPLE.NAME, People.PEOPLE.BIRTHDATE }, true);
    public static final UniqueKey<PeopleRecord> KEY_PEOPLE_PERSONID = Internal.createUniqueKey(People.PEOPLE, DSL.name("KEY_people_personid"), new TableField[] { People.PEOPLE.PERSONID }, true);
    public static final UniqueKey<PeopleRecord> KEY_PEOPLE_PRIMARY = Internal.createUniqueKey(People.PEOPLE, DSL.name("KEY_people_PRIMARY"), new TableField[] { People.PEOPLE.PERSONID }, true);
    public static final UniqueKey<PeoplebooksRecord> KEY_PEOPLEBOOKS_DUPLICATEDENTRY_PEOPLEMOVIES = Internal.createUniqueKey(Peoplebooks.PEOPLEBOOKS, DSL.name("KEY_peopleBooks_duplicatedEntry_peopleMovies"), new TableField[] { Peoplebooks.PEOPLEBOOKS.BOOKID, Peoplebooks.PEOPLEBOOKS.PERSONID, Peoplebooks.PEOPLEBOOKS.ROLE }, true);
    public static final UniqueKey<PeoplebooksRecord> KEY_PEOPLEBOOKS_PEOPLEBOOKSID = Internal.createUniqueKey(Peoplebooks.PEOPLEBOOKS, DSL.name("KEY_peopleBooks_peopleBooksid"), new TableField[] { Peoplebooks.PEOPLEBOOKS.PEOPLEBOOKSID }, true);
    public static final UniqueKey<PeoplebooksRecord> KEY_PEOPLEBOOKS_PRIMARY = Internal.createUniqueKey(Peoplebooks.PEOPLEBOOKS, DSL.name("KEY_peopleBooks_PRIMARY"), new TableField[] { Peoplebooks.PEOPLEBOOKS.PEOPLEBOOKSID }, true);
    public static final UniqueKey<PeopleepisodesRecord> KEY_PEOPLEEPISODES_DUPLICATEDENTRY_PEOPLEEPISODES = Internal.createUniqueKey(Peopleepisodes.PEOPLEEPISODES, DSL.name("KEY_peopleEpisodes_duplicatedEntry_peopleEpisodes"), new TableField[] { Peopleepisodes.PEOPLEEPISODES.EPISODEID, Peopleepisodes.PEOPLEEPISODES.PERSONID, Peopleepisodes.PEOPLEEPISODES.ROLE }, true);
    public static final UniqueKey<PeopleepisodesRecord> KEY_PEOPLEEPISODES_PEOPLEEPISODESID = Internal.createUniqueKey(Peopleepisodes.PEOPLEEPISODES, DSL.name("KEY_peopleEpisodes_peopleEpisodesid"), new TableField[] { Peopleepisodes.PEOPLEEPISODES.PEOPLEEPISODESID }, true);
    public static final UniqueKey<PeopleepisodesRecord> KEY_PEOPLEEPISODES_PRIMARY = Internal.createUniqueKey(Peopleepisodes.PEOPLEEPISODES, DSL.name("KEY_peopleEpisodes_PRIMARY"), new TableField[] { Peopleepisodes.PEOPLEEPISODES.PEOPLEEPISODESID }, true);
    public static final UniqueKey<PeoplemoviesRecord> KEY_PEOPLEMOVIES_DUPLICATEDENTRY_PEOPLEMOVIES = Internal.createUniqueKey(Peoplemovies.PEOPLEMOVIES, DSL.name("KEY_peopleMovies_duplicatedEntry_peopleMovies"), new TableField[] { Peoplemovies.PEOPLEMOVIES.MOVIEID, Peoplemovies.PEOPLEMOVIES.PERSONID, Peoplemovies.PEOPLEMOVIES.ROLE, Peoplemovies.PEOPLEMOVIES.ROLETYPE }, true);
    public static final UniqueKey<PeoplemoviesRecord> KEY_PEOPLEMOVIES_PEOPLEMOVIESID = Internal.createUniqueKey(Peoplemovies.PEOPLEMOVIES, DSL.name("KEY_peopleMovies_peopleMoviesid"), new TableField[] { Peoplemovies.PEOPLEMOVIES.PEOPLEMOVIESID }, true);
    public static final UniqueKey<PeoplemoviesRecord> KEY_PEOPLEMOVIES_PRIMARY = Internal.createUniqueKey(Peoplemovies.PEOPLEMOVIES, DSL.name("KEY_peopleMovies_PRIMARY"), new TableField[] { Peoplemovies.PEOPLEMOVIES.PEOPLEMOVIESID }, true);
    public static final UniqueKey<PeoplevideogamesRecord> KEY_PEOPLEVIDEOGAMES_DUPLICATEDENTRY_PEOPLEVIDEOGAMES = Internal.createUniqueKey(Peoplevideogames.PEOPLEVIDEOGAMES, DSL.name("KEY_peopleVideogames_duplicatedEntry_peopleVideogames"), new TableField[] { Peoplevideogames.PEOPLEVIDEOGAMES.VIDEOGAMEID, Peoplevideogames.PEOPLEVIDEOGAMES.PERSONID, Peoplevideogames.PEOPLEVIDEOGAMES.ROLE, Peoplevideogames.PEOPLEVIDEOGAMES.ROLETYPE }, true);
    public static final UniqueKey<PeoplevideogamesRecord> KEY_PEOPLEVIDEOGAMES_PEOPLEVIDEOGAMESID = Internal.createUniqueKey(Peoplevideogames.PEOPLEVIDEOGAMES, DSL.name("KEY_peopleVideogames_peopleVideogamesid"), new TableField[] { Peoplevideogames.PEOPLEVIDEOGAMES.PEOPLEVIDEOGAMESID }, true);
    public static final UniqueKey<PeoplevideogamesRecord> KEY_PEOPLEVIDEOGAMES_PRIMARY = Internal.createUniqueKey(Peoplevideogames.PEOPLEVIDEOGAMES, DSL.name("KEY_peopleVideogames_PRIMARY"), new TableField[] { Peoplevideogames.PEOPLEVIDEOGAMES.PEOPLEVIDEOGAMESID }, true);
    public static final UniqueKey<PlatformsRecord> KEY_PLATFORMS_PLATFORMID = Internal.createUniqueKey(Platforms.PLATFORMS, DSL.name("KEY_platforms_platformid"), new TableField[] { Platforms.PLATFORMS.PLATFORMID }, true);
    public static final UniqueKey<PlatformsRecord> KEY_PLATFORMS_PLATFORMNAME = Internal.createUniqueKey(Platforms.PLATFORMS, DSL.name("KEY_platforms_platformName"), new TableField[] { Platforms.PLATFORMS.PLATFORMNAME }, true);
    public static final UniqueKey<PlatformsRecord> KEY_PLATFORMS_PRIMARY = Internal.createUniqueKey(Platforms.PLATFORMS, DSL.name("KEY_platforms_PRIMARY"), new TableField[] { Platforms.PLATFORMS.PLATFORMID }, true);
    public static final UniqueKey<ReportsRecord> KEY_REPORTS_ALREADYREPORTED = Internal.createUniqueKey(Reports.REPORTS, DSL.name("KEY_reports_alreadyReported"), new TableField[] { Reports.REPORTS.USERIDREPORTED, Reports.REPORTS.USERIDREPORTER, Reports.REPORTS.REVIEWID }, true);
    public static final UniqueKey<ReportsRecord> KEY_REPORTS_PRIMARY = Internal.createUniqueKey(Reports.REPORTS, DSL.name("KEY_reports_PRIMARY"), new TableField[] { Reports.REPORTS.REPORTID }, true);
    public static final UniqueKey<ReportsRecord> KEY_REPORTS_REPORTID = Internal.createUniqueKey(Reports.REPORTS, DSL.name("KEY_reports_reportid"), new TableField[] { Reports.REPORTS.REPORTID }, true);
    public static final UniqueKey<ReviewlikesRecord> KEY_REVIEWLIKES_ALREADYLIKED = Internal.createUniqueKey(Reviewlikes.REVIEWLIKES, DSL.name("KEY_reviewlikes_alreadyliked"), new TableField[] { Reviewlikes.REVIEWLIKES.USERID, Reviewlikes.REVIEWLIKES.REVIEWID }, true);
    public static final UniqueKey<ReviewlikesRecord> KEY_REVIEWLIKES_PRIMARY = Internal.createUniqueKey(Reviewlikes.REVIEWLIKES, DSL.name("KEY_reviewlikes_PRIMARY"), new TableField[] { Reviewlikes.REVIEWLIKES.REVIEWLIKEID }, true);
    public static final UniqueKey<ReviewsRecord> KEY_REVIEWS_PRIMARY = Internal.createUniqueKey(Reviews.REVIEWS, DSL.name("KEY_reviews_PRIMARY"), new TableField[] { Reviews.REVIEWS.REVIEWID }, true);
    public static final UniqueKey<ReviewsRecord> KEY_REVIEWS_REVIEWALREADYEXIST = Internal.createUniqueKey(Reviews.REVIEWS, DSL.name("KEY_reviews_reviewAlreadyExist"), new TableField[] { Reviews.REVIEWS.USERID, Reviews.REVIEWS.MEDIAID }, true);
    public static final UniqueKey<ReviewsRecord> KEY_REVIEWS_REVIEWID = Internal.createUniqueKey(Reviews.REVIEWS, DSL.name("KEY_reviews_reviewid"), new TableField[] { Reviews.REVIEWS.REVIEWID }, true);
    public static final UniqueKey<SeasonsRecord> KEY_SEASONS_DUPLICATEDENTRY_SEASONS = Internal.createUniqueKey(Seasons.SEASONS, DSL.name("KEY_seasons_duplicatedEntry_seasons"), new TableField[] { Seasons.SEASONS.SERIESID, Seasons.SEASONS.SEASONNO }, true);
    public static final UniqueKey<SeasonsRecord> KEY_SEASONS_PRIMARY = Internal.createUniqueKey(Seasons.SEASONS, DSL.name("KEY_seasons_PRIMARY"), new TableField[] { Seasons.SEASONS.SEASONID }, true);
    public static final UniqueKey<SeasonsRecord> KEY_SEASONS_SEASONID = Internal.createUniqueKey(Seasons.SEASONS, DSL.name("KEY_seasons_seasonid"), new TableField[] { Seasons.SEASONS.SEASONID }, true);
    public static final UniqueKey<SeriesRecord> KEY_SERIES_MEDIAID = Internal.createUniqueKey(Series.SERIES, DSL.name("KEY_series_mediaid"), new TableField[] { Series.SERIES.MEDIAID }, true);
    public static final UniqueKey<SeriesRecord> KEY_SERIES_PRIMARY = Internal.createUniqueKey(Series.SERIES, DSL.name("KEY_series_PRIMARY"), new TableField[] { Series.SERIES.SERIESID }, true);
    public static final UniqueKey<SeriesRecord> KEY_SERIES_SERIESID = Internal.createUniqueKey(Series.SERIES, DSL.name("KEY_series_seriesid"), new TableField[] { Series.SERIES.SERIESID }, true);
    public static final UniqueKey<TrackersRecord> KEY_TRACKERS_PRIMARY = Internal.createUniqueKey(Trackers.TRACKERS, DSL.name("KEY_trackers_PRIMARY"), new TableField[] { Trackers.TRACKERS.TRACKERID }, true);
    public static final UniqueKey<TrackersRecord> KEY_TRACKERS_TRACKERID = Internal.createUniqueKey(Trackers.TRACKERS, DSL.name("KEY_trackers_trackerid"), new TableField[] { Trackers.TRACKERS.TRACKERID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_EMAIL = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_email"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.USERID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_USERID = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_userid"), new TableField[] { Users.USERS.USERID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_USERNAME = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_username"), new TableField[] { Users.USERS.USERNAME }, true);
    public static final UniqueKey<VideogameplatformsRecord> KEY_VIDEOGAMEPLATFORMS_DUPLICATEDENTRY_VIDEOGAMEPLATFORMS = Internal.createUniqueKey(Videogameplatforms.VIDEOGAMEPLATFORMS, DSL.name("KEY_videogameplatforms_duplicatedEntry_videogameplatforms"), new TableField[] { Videogameplatforms.VIDEOGAMEPLATFORMS.VIDEOGAMEID, Videogameplatforms.VIDEOGAMEPLATFORMS.PLATFORMID }, true);
    public static final UniqueKey<VideogameplatformsRecord> KEY_VIDEOGAMEPLATFORMS_PRIMARY = Internal.createUniqueKey(Videogameplatforms.VIDEOGAMEPLATFORMS, DSL.name("KEY_videogameplatforms_PRIMARY"), new TableField[] { Videogameplatforms.VIDEOGAMEPLATFORMS.VIDEOGAMEPLATFORMID }, true);
    public static final UniqueKey<VideogameplatformsRecord> KEY_VIDEOGAMEPLATFORMS_VIDEOGAMEPLATFORMID = Internal.createUniqueKey(Videogameplatforms.VIDEOGAMEPLATFORMS, DSL.name("KEY_videogameplatforms_videogamePlatformid"), new TableField[] { Videogameplatforms.VIDEOGAMEPLATFORMS.VIDEOGAMEPLATFORMID }, true);
    public static final UniqueKey<VideogamesRecord> KEY_VIDEOGAMES_MEDIAID = Internal.createUniqueKey(Videogames.VIDEOGAMES, DSL.name("KEY_videogames_mediaid"), new TableField[] { Videogames.VIDEOGAMES.MEDIAID }, true);
    public static final UniqueKey<VideogamesRecord> KEY_VIDEOGAMES_PRIMARY = Internal.createUniqueKey(Videogames.VIDEOGAMES, DSL.name("KEY_videogames_PRIMARY"), new TableField[] { Videogames.VIDEOGAMES.VIDEOGAMEID }, true);
    public static final UniqueKey<VideogamesRecord> KEY_VIDEOGAMES_VIDEOGAMEID = Internal.createUniqueKey(Videogames.VIDEOGAMES, DSL.name("KEY_videogames_videogameid"), new TableField[] { Videogames.VIDEOGAMES.VIDEOGAMEID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AdminsRecord, UsersRecord> ADMINS_IBFK_1 = Internal.createForeignKey(Admins.ADMINS, DSL.name("admins_ibfk_1"), new TableField[] { Admins.ADMINS.USERID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USERID }, true);
    public static final ForeignKey<BooksRecord, MediaRecord> BOOKS_IBFK_1 = Internal.createForeignKey(Books.BOOKS, DSL.name("books_ibfk_1"), new TableField[] { Books.BOOKS.MEDIAID }, Keys.KEY_MEDIA_PRIMARY, new TableField[] { Media.MEDIA.MEDIAID }, true);
    public static final ForeignKey<EpisodesRecord, SeasonsRecord> EPISODES_IBFK_1 = Internal.createForeignKey(Episodes.EPISODES, DSL.name("episodes_ibfk_1"), new TableField[] { Episodes.EPISODES.SEASONID }, Keys.KEY_SEASONS_PRIMARY, new TableField[] { Seasons.SEASONS.SEASONID }, true);
    public static final ForeignKey<ListmediaRecord, ListsRecord> LISTMEDIA_IBFK_1 = Internal.createForeignKey(Listmedia.LISTMEDIA, DSL.name("listmedia_ibfk_1"), new TableField[] { Listmedia.LISTMEDIA.LISTID }, Keys.KEY_LISTS_PRIMARY, new TableField[] { Lists.LISTS.LISTID }, true);
    public static final ForeignKey<ListmediaRecord, MediaRecord> LISTMEDIA_IBFK_2 = Internal.createForeignKey(Listmedia.LISTMEDIA, DSL.name("listmedia_ibfk_2"), new TableField[] { Listmedia.LISTMEDIA.MEDIAID }, Keys.KEY_MEDIA_PRIMARY, new TableField[] { Media.MEDIA.MEDIAID }, true);
    public static final ForeignKey<ListsRecord, UsersRecord> LISTS_IBFK_1 = Internal.createForeignKey(Lists.LISTS, DSL.name("lists_ibfk_1"), new TableField[] { Lists.LISTS.USERID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USERID }, true);
    public static final ForeignKey<MediagenresRecord, MediaRecord> MEDIAGENRES_IBFK_1 = Internal.createForeignKey(Mediagenres.MEDIAGENRES, DSL.name("mediaGenres_ibfk_1"), new TableField[] { Mediagenres.MEDIAGENRES.MEDIAID }, Keys.KEY_MEDIA_PRIMARY, new TableField[] { Media.MEDIA.MEDIAID }, true);
    public static final ForeignKey<MediagenresRecord, GenresRecord> MEDIAGENRES_IBFK_2 = Internal.createForeignKey(Mediagenres.MEDIAGENRES, DSL.name("mediaGenres_ibfk_2"), new TableField[] { Mediagenres.MEDIAGENRES.GENREID }, Keys.KEY_GENRES_PRIMARY, new TableField[] { Genres.GENRES.GENREID }, true);
    public static final ForeignKey<MoviesRecord, MediaRecord> MOVIES_IBFK_1 = Internal.createForeignKey(Movies.MOVIES, DSL.name("movies_ibfk_1"), new TableField[] { Movies.MOVIES.MEDIAID }, Keys.KEY_MEDIA_PRIMARY, new TableField[] { Media.MEDIA.MEDIAID }, true);
    public static final ForeignKey<NormalsRecord, UsersRecord> NORMALS_IBFK_1 = Internal.createForeignKey(Normals.NORMALS, DSL.name("normals_ibfk_1"), new TableField[] { Normals.NORMALS.USERID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USERID }, true);
    public static final ForeignKey<PeoplebooksRecord, BooksRecord> PEOPLEBOOKS_IBFK_1 = Internal.createForeignKey(Peoplebooks.PEOPLEBOOKS, DSL.name("peopleBooks_ibfk_1"), new TableField[] { Peoplebooks.PEOPLEBOOKS.BOOKID }, Keys.KEY_BOOKS_PRIMARY, new TableField[] { Books.BOOKS.BOOKID }, true);
    public static final ForeignKey<PeoplebooksRecord, PeopleRecord> PEOPLEBOOKS_IBFK_2 = Internal.createForeignKey(Peoplebooks.PEOPLEBOOKS, DSL.name("peopleBooks_ibfk_2"), new TableField[] { Peoplebooks.PEOPLEBOOKS.PERSONID }, Keys.KEY_PEOPLE_PRIMARY, new TableField[] { People.PEOPLE.PERSONID }, true);
    public static final ForeignKey<PeopleepisodesRecord, EpisodesRecord> PEOPLEEPISODES_IBFK_1 = Internal.createForeignKey(Peopleepisodes.PEOPLEEPISODES, DSL.name("peopleEpisodes_ibfk_1"), new TableField[] { Peopleepisodes.PEOPLEEPISODES.EPISODEID }, Keys.KEY_EPISODES_PRIMARY, new TableField[] { Episodes.EPISODES.EPISODEID }, true);
    public static final ForeignKey<PeopleepisodesRecord, PeopleRecord> PEOPLEEPISODES_IBFK_2 = Internal.createForeignKey(Peopleepisodes.PEOPLEEPISODES, DSL.name("peopleEpisodes_ibfk_2"), new TableField[] { Peopleepisodes.PEOPLEEPISODES.PERSONID }, Keys.KEY_PEOPLE_PRIMARY, new TableField[] { People.PEOPLE.PERSONID }, true);
    public static final ForeignKey<PeoplemoviesRecord, MoviesRecord> PEOPLEMOVIES_IBFK_1 = Internal.createForeignKey(Peoplemovies.PEOPLEMOVIES, DSL.name("peopleMovies_ibfk_1"), new TableField[] { Peoplemovies.PEOPLEMOVIES.MOVIEID }, Keys.KEY_MOVIES_PRIMARY, new TableField[] { Movies.MOVIES.MOVIEID }, true);
    public static final ForeignKey<PeoplemoviesRecord, PeopleRecord> PEOPLEMOVIES_IBFK_2 = Internal.createForeignKey(Peoplemovies.PEOPLEMOVIES, DSL.name("peopleMovies_ibfk_2"), new TableField[] { Peoplemovies.PEOPLEMOVIES.PERSONID }, Keys.KEY_PEOPLE_PRIMARY, new TableField[] { People.PEOPLE.PERSONID }, true);
    public static final ForeignKey<PeoplevideogamesRecord, VideogamesRecord> PEOPLEVIDEOGAMES_IBFK_1 = Internal.createForeignKey(Peoplevideogames.PEOPLEVIDEOGAMES, DSL.name("peopleVideogames_ibfk_1"), new TableField[] { Peoplevideogames.PEOPLEVIDEOGAMES.VIDEOGAMEID }, Keys.KEY_VIDEOGAMES_PRIMARY, new TableField[] { Videogames.VIDEOGAMES.VIDEOGAMEID }, true);
    public static final ForeignKey<PeoplevideogamesRecord, PeopleRecord> PEOPLEVIDEOGAMES_IBFK_2 = Internal.createForeignKey(Peoplevideogames.PEOPLEVIDEOGAMES, DSL.name("peopleVideogames_ibfk_2"), new TableField[] { Peoplevideogames.PEOPLEVIDEOGAMES.PERSONID }, Keys.KEY_PEOPLE_PRIMARY, new TableField[] { People.PEOPLE.PERSONID }, true);
    public static final ForeignKey<ReportsRecord, UsersRecord> REPORTS_IBFK_1 = Internal.createForeignKey(Reports.REPORTS, DSL.name("reports_ibfk_1"), new TableField[] { Reports.REPORTS.USERIDREPORTER }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USERID }, true);
    public static final ForeignKey<ReportsRecord, ReviewsRecord> REPORTS_IBFK_2 = Internal.createForeignKey(Reports.REPORTS, DSL.name("reports_ibfk_2"), new TableField[] { Reports.REPORTS.USERIDREPORTED }, Keys.KEY_REVIEWS_REVIEWALREADYEXIST, new TableField[] { Reviews.REVIEWS.USERID }, true);
    public static final ForeignKey<ReportsRecord, ReviewsRecord> REPORTS_IBFK_3 = Internal.createForeignKey(Reports.REPORTS, DSL.name("reports_ibfk_3"), new TableField[] { Reports.REPORTS.REVIEWID }, Keys.KEY_REVIEWS_PRIMARY, new TableField[] { Reviews.REVIEWS.REVIEWID }, true);
    public static final ForeignKey<ReviewlikesRecord, UsersRecord> REVIEWLIKES_IBFK_1 = Internal.createForeignKey(Reviewlikes.REVIEWLIKES, DSL.name("reviewlikes_ibfk_1"), new TableField[] { Reviewlikes.REVIEWLIKES.USERID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USERID }, true);
    public static final ForeignKey<ReviewlikesRecord, ReviewsRecord> REVIEWLIKES_IBFK_2 = Internal.createForeignKey(Reviewlikes.REVIEWLIKES, DSL.name("reviewlikes_ibfk_2"), new TableField[] { Reviewlikes.REVIEWLIKES.REVIEWID }, Keys.KEY_REVIEWS_PRIMARY, new TableField[] { Reviews.REVIEWS.REVIEWID }, true);
    public static final ForeignKey<ReviewsRecord, UsersRecord> REVIEWS_IBFK_1 = Internal.createForeignKey(Reviews.REVIEWS, DSL.name("reviews_ibfk_1"), new TableField[] { Reviews.REVIEWS.USERID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USERID }, true);
    public static final ForeignKey<ReviewsRecord, MediaRecord> REVIEWS_IBFK_2 = Internal.createForeignKey(Reviews.REVIEWS, DSL.name("reviews_ibfk_2"), new TableField[] { Reviews.REVIEWS.MEDIAID }, Keys.KEY_MEDIA_PRIMARY, new TableField[] { Media.MEDIA.MEDIAID }, true);
    public static final ForeignKey<SeasonsRecord, SeriesRecord> SEASONS_IBFK_1 = Internal.createForeignKey(Seasons.SEASONS, DSL.name("seasons_ibfk_1"), new TableField[] { Seasons.SEASONS.SERIESID }, Keys.KEY_SERIES_PRIMARY, new TableField[] { Series.SERIES.SERIESID }, true);
    public static final ForeignKey<SeriesRecord, MediaRecord> SERIES_IBFK_1 = Internal.createForeignKey(Series.SERIES, DSL.name("series_ibfk_1"), new TableField[] { Series.SERIES.MEDIAID }, Keys.KEY_MEDIA_PRIMARY, new TableField[] { Media.MEDIA.MEDIAID }, true);
    public static final ForeignKey<TrackersRecord, MediaRecord> TRACKERS_IBFK_1 = Internal.createForeignKey(Trackers.TRACKERS, DSL.name("trackers_ibfk_1"), new TableField[] { Trackers.TRACKERS.MEDIAID }, Keys.KEY_MEDIA_PRIMARY, new TableField[] { Media.MEDIA.MEDIAID }, true);
    public static final ForeignKey<TrackersRecord, UsersRecord> TRACKERS_IBFK_2 = Internal.createForeignKey(Trackers.TRACKERS, DSL.name("trackers_ibfk_2"), new TableField[] { Trackers.TRACKERS.USERID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.USERID }, true);
    public static final ForeignKey<VideogameplatformsRecord, PlatformsRecord> VIDEOGAMEPLATFORMS_IBFK_1 = Internal.createForeignKey(Videogameplatforms.VIDEOGAMEPLATFORMS, DSL.name("videogameplatforms_ibfk_1"), new TableField[] { Videogameplatforms.VIDEOGAMEPLATFORMS.PLATFORMID }, Keys.KEY_PLATFORMS_PRIMARY, new TableField[] { Platforms.PLATFORMS.PLATFORMID }, true);
    public static final ForeignKey<VideogameplatformsRecord, VideogamesRecord> VIDEOGAMEPLATFORMS_IBFK_2 = Internal.createForeignKey(Videogameplatforms.VIDEOGAMEPLATFORMS, DSL.name("videogameplatforms_ibfk_2"), new TableField[] { Videogameplatforms.VIDEOGAMEPLATFORMS.VIDEOGAMEID }, Keys.KEY_VIDEOGAMES_PRIMARY, new TableField[] { Videogames.VIDEOGAMES.VIDEOGAMEID }, true);
    public static final ForeignKey<VideogamesRecord, MediaRecord> VIDEOGAMES_IBFK_1 = Internal.createForeignKey(Videogames.VIDEOGAMES, DSL.name("videogames_ibfk_1"), new TableField[] { Videogames.VIDEOGAMES.MEDIAID }, Keys.KEY_MEDIA_PRIMARY, new TableField[] { Media.MEDIA.MEDIAID }, true);
}
