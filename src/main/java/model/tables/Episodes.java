/*
 * This file is generated by jOOQ.
 */
package src.main.java.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import src.main.java.model.Harmony;
import src.main.java.model.Keys;
import src.main.java.model.tables.records.EpisodesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Episodes extends TableImpl<EpisodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>harmony.episodes</code>
     */
    public static final Episodes EPISODES = new Episodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EpisodesRecord> getRecordType() {
        return EpisodesRecord.class;
    }

    /**
     * The column <code>harmony.episodes.episodeid</code>.
     */
    public final TableField<EpisodesRecord, Integer> EPISODEID = createField(DSL.name("episodeid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>harmony.episodes.seasonid</code>.
     */
    public final TableField<EpisodesRecord, Integer> SEASONID = createField(DSL.name("seasonid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>harmony.episodes.episodeName</code>.
     */
    public final TableField<EpisodesRecord, String> EPISODENAME = createField(DSL.name("episodeName"), SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>harmony.episodes.episodeNo</code>.
     */
    public final TableField<EpisodesRecord, Integer> EPISODENO = createField(DSL.name("episodeNo"), SQLDataType.INTEGER.nullable(false), this, "");

    private Episodes(Name alias, Table<EpisodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Episodes(Name alias, Table<EpisodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>harmony.episodes</code> table reference
     */
    public Episodes(String alias) {
        this(DSL.name(alias), EPISODES);
    }

    /**
     * Create an aliased <code>harmony.episodes</code> table reference
     */
    public Episodes(Name alias) {
        this(alias, EPISODES);
    }

    /**
     * Create a <code>harmony.episodes</code> table reference
     */
    public Episodes() {
        this(DSL.name("episodes"), null);
    }

    public <O extends Record> Episodes(Table<O> child, ForeignKey<O, EpisodesRecord> key) {
        super(child, key, EPISODES);
    }

    @Override
    public Schema getSchema() {
        return Harmony.HARMONY;
    }

    @Override
    public Identity<EpisodesRecord, Integer> getIdentity() {
        return (Identity<EpisodesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EpisodesRecord> getPrimaryKey() {
        return Keys.KEY_EPISODES_PRIMARY;
    }

    @Override
    public List<UniqueKey<EpisodesRecord>> getKeys() {
        return Arrays.<UniqueKey<EpisodesRecord>>asList(Keys.KEY_EPISODES_PRIMARY, Keys.KEY_EPISODES_EPISODEID, Keys.KEY_EPISODES_DUPLICATEDENTRY_EPISODES);
    }

    @Override
    public List<ForeignKey<EpisodesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EpisodesRecord, ?>>asList(Keys.EPISODES_IBFK_1);
    }

    private transient Seasons _seasons;

    public Seasons seasons() {
        if (_seasons == null)
            _seasons = new Seasons(this, Keys.EPISODES_IBFK_1);

        return _seasons;
    }

    @Override
    public Episodes as(String alias) {
        return new Episodes(DSL.name(alias), this);
    }

    @Override
    public Episodes as(Name alias) {
        return new Episodes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Episodes rename(String name) {
        return new Episodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Episodes rename(Name name) {
        return new Episodes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
