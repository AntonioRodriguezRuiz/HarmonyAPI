/*
 * This file is generated by jOOQ.
 */
package src.main.java.model.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import src.main.java.model.Harmony;
import src.main.java.model.Keys;
import src.main.java.model.tables.records.MediaRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Media extends TableImpl<MediaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>harmony.media</code>
     */
    public static final Media MEDIA = new Media();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MediaRecord> getRecordType() {
        return MediaRecord.class;
    }

    /**
     * The column <code>harmony.media.mediaid</code>.
     */
    public final TableField<MediaRecord, Integer> MEDIAID = createField(DSL.name("mediaid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>harmony.media.title</code>.
     */
    public final TableField<MediaRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>harmony.media.releaseDate</code>.
     */
    public final TableField<MediaRecord, LocalDate> RELEASEDATE = createField(DSL.name("releaseDate"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>harmony.media.coverImage</code>.
     */
    public final TableField<MediaRecord, String> COVERIMAGE = createField(DSL.name("coverImage"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>harmony.media.backgroundImage</code>.
     */
    public final TableField<MediaRecord, String> BACKGROUNDIMAGE = createField(DSL.name("backgroundImage"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>harmony.media.synopsis</code>.
     */
    public final TableField<MediaRecord, String> SYNOPSIS = createField(DSL.name("synopsis"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>harmony.media.avgRating</code>.
     */
    public final TableField<MediaRecord, Double> AVGRATING = createField(DSL.name("avgRating"), SQLDataType.FLOAT.defaultValue(DSL.field("NULL", SQLDataType.FLOAT)), this, "");

    /**
     * The column <code>harmony.media.externalId</code>.
     */
    public final TableField<MediaRecord, Integer> EXTERNALID = createField(DSL.name("externalId"), SQLDataType.INTEGER.defaultValue(DSL.field("NULL", SQLDataType.INTEGER)), this, "");

    private Media(Name alias, Table<MediaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Media(Name alias, Table<MediaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>harmony.media</code> table reference
     */
    public Media(String alias) {
        this(DSL.name(alias), MEDIA);
    }

    /**
     * Create an aliased <code>harmony.media</code> table reference
     */
    public Media(Name alias) {
        this(alias, MEDIA);
    }

    /**
     * Create a <code>harmony.media</code> table reference
     */
    public Media() {
        this(DSL.name("media"), null);
    }

    public <O extends Record> Media(Table<O> child, ForeignKey<O, MediaRecord> key) {
        super(child, key, MEDIA);
    }

    @Override
    public Schema getSchema() {
        return Harmony.HARMONY;
    }

    @Override
    public Identity<MediaRecord, Integer> getIdentity() {
        return (Identity<MediaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MediaRecord> getPrimaryKey() {
        return Keys.KEY_MEDIA_PRIMARY;
    }

    @Override
    public List<UniqueKey<MediaRecord>> getKeys() {
        return Arrays.<UniqueKey<MediaRecord>>asList(Keys.KEY_MEDIA_PRIMARY, Keys.KEY_MEDIA_MEDIAID, Keys.KEY_MEDIA_MEDIAALREADYEXISTS);
    }

    @Override
    public List<Check<MediaRecord>> getChecks() {
        return Arrays.<Check<MediaRecord>>asList(
              Internal.createCheck(this, DSL.name("intervalRating"), "0 <= `avgRating` <= 5", true)
        );
    }

    @Override
    public Media as(String alias) {
        return new Media(DSL.name(alias), this);
    }

    @Override
    public Media as(Name alias) {
        return new Media(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Media rename(String name) {
        return new Media(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Media rename(Name name) {
        return new Media(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, LocalDate, String, String, String, Double, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
