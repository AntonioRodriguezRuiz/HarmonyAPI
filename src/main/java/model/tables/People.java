/*
 * This file is generated by jOOQ.
 */
package src.main.java.model.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import src.main.java.model.Harmony;
import src.main.java.model.Keys;
import src.main.java.model.tables.records.PeopleRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class People extends TableImpl<PeopleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>harmony.people</code>
     */
    public static final People PEOPLE = new People();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeopleRecord> getRecordType() {
        return PeopleRecord.class;
    }

    /**
     * The column <code>harmony.people.personid</code>.
     */
    public final TableField<PeopleRecord, Integer> PERSONID = createField(DSL.name("personid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>harmony.people.name</code>.
     */
    public final TableField<PeopleRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(60).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>harmony.people.birthdate</code>.
     */
    public final TableField<PeopleRecord, LocalDate> BIRTHDATE = createField(DSL.name("birthdate"), SQLDataType.LOCALDATE.defaultValue(DSL.field("NULL", SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>harmony.people.picture</code>.
     */
    public final TableField<PeopleRecord, String> PICTURE = createField(DSL.name("picture"), SQLDataType.VARCHAR(240).defaultValue(DSL.field("NULL", SQLDataType.VARCHAR)), this, "");

    private People(Name alias, Table<PeopleRecord> aliased) {
        this(alias, aliased, null);
    }

    private People(Name alias, Table<PeopleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>harmony.people</code> table reference
     */
    public People(String alias) {
        this(DSL.name(alias), PEOPLE);
    }

    /**
     * Create an aliased <code>harmony.people</code> table reference
     */
    public People(Name alias) {
        this(alias, PEOPLE);
    }

    /**
     * Create a <code>harmony.people</code> table reference
     */
    public People() {
        this(DSL.name("people"), null);
    }

    public <O extends Record> People(Table<O> child, ForeignKey<O, PeopleRecord> key) {
        super(child, key, PEOPLE);
    }

    @Override
    public Schema getSchema() {
        return Harmony.HARMONY;
    }

    @Override
    public Identity<PeopleRecord, Integer> getIdentity() {
        return (Identity<PeopleRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PeopleRecord> getPrimaryKey() {
        return Keys.KEY_PEOPLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PeopleRecord>> getKeys() {
        return Arrays.<UniqueKey<PeopleRecord>>asList(Keys.KEY_PEOPLE_PRIMARY, Keys.KEY_PEOPLE_PERSONID, Keys.KEY_PEOPLE_DUPLICATEDENTRY_PEOPLE);
    }

    @Override
    public People as(String alias) {
        return new People(DSL.name(alias), this);
    }

    @Override
    public People as(Name alias) {
        return new People(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public People rename(String name) {
        return new People(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public People rename(Name name) {
        return new People(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDate, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
