/*
 * This file is generated by jOOQ.
 */
package src.main.java.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import src.main.java.model.Harmony;
import src.main.java.model.Indexes;
import src.main.java.model.Keys;
import src.main.java.model.tables.records.PeopleepisodesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Peopleepisodes extends TableImpl<PeopleepisodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>harmony.peopleEpisodes</code>
     */
    public static final Peopleepisodes PEOPLEEPISODES = new Peopleepisodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PeopleepisodesRecord> getRecordType() {
        return PeopleepisodesRecord.class;
    }

    /**
     * The column <code>harmony.peopleEpisodes.peopleEpisodesid</code>.
     */
    public final TableField<PeopleepisodesRecord, Integer> PEOPLEEPISODESID = createField(DSL.name("peopleEpisodesid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>harmony.peopleEpisodes.episodeid</code>.
     */
    public final TableField<PeopleepisodesRecord, Integer> EPISODEID = createField(DSL.name("episodeid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>harmony.peopleEpisodes.personid</code>.
     */
    public final TableField<PeopleepisodesRecord, Integer> PERSONID = createField(DSL.name("personid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>harmony.peopleEpisodes.role</code>.
     */
    public final TableField<PeopleepisodesRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * The column <code>harmony.peopleEpisodes.roletype</code>.
     */
    public final TableField<PeopleepisodesRecord, Byte> ROLETYPE = createField(DSL.name("roletype"), SQLDataType.TINYINT.defaultValue(DSL.field("NULL", SQLDataType.TINYINT)), this, "");

    private Peopleepisodes(Name alias, Table<PeopleepisodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Peopleepisodes(Name alias, Table<PeopleepisodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>harmony.peopleEpisodes</code> table reference
     */
    public Peopleepisodes(String alias) {
        this(DSL.name(alias), PEOPLEEPISODES);
    }

    /**
     * Create an aliased <code>harmony.peopleEpisodes</code> table reference
     */
    public Peopleepisodes(Name alias) {
        this(alias, PEOPLEEPISODES);
    }

    /**
     * Create a <code>harmony.peopleEpisodes</code> table reference
     */
    public Peopleepisodes() {
        this(DSL.name("peopleEpisodes"), null);
    }

    public <O extends Record> Peopleepisodes(Table<O> child, ForeignKey<O, PeopleepisodesRecord> key) {
        super(child, key, PEOPLEEPISODES);
    }

    @Override
    public Schema getSchema() {
        return Harmony.HARMONY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PEOPLEEPISODES_PERSONID);
    }

    @Override
    public Identity<PeopleepisodesRecord, Integer> getIdentity() {
        return (Identity<PeopleepisodesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PeopleepisodesRecord> getPrimaryKey() {
        return Keys.KEY_PEOPLEEPISODES_PRIMARY;
    }

    @Override
    public List<UniqueKey<PeopleepisodesRecord>> getKeys() {
        return Arrays.<UniqueKey<PeopleepisodesRecord>>asList(Keys.KEY_PEOPLEEPISODES_PRIMARY, Keys.KEY_PEOPLEEPISODES_PEOPLEEPISODESID, Keys.KEY_PEOPLEEPISODES_DUPLICATEDENTRY_PEOPLEEPISODES);
    }

    @Override
    public List<ForeignKey<PeopleepisodesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PeopleepisodesRecord, ?>>asList(Keys.PEOPLEEPISODES_IBFK_1, Keys.PEOPLEEPISODES_IBFK_2);
    }

    private transient Episodes _episodes;
    private transient People _people;

    public Episodes episodes() {
        if (_episodes == null)
            _episodes = new Episodes(this, Keys.PEOPLEEPISODES_IBFK_1);

        return _episodes;
    }

    public People people() {
        if (_people == null)
            _people = new People(this, Keys.PEOPLEEPISODES_IBFK_2);

        return _people;
    }

    @Override
    public Peopleepisodes as(String alias) {
        return new Peopleepisodes(DSL.name(alias), this);
    }

    @Override
    public Peopleepisodes as(Name alias) {
        return new Peopleepisodes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Peopleepisodes rename(String name) {
        return new Peopleepisodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Peopleepisodes rename(Name name) {
        return new Peopleepisodes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, String, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
