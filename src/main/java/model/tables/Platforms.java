/*
 * This file is generated by jOOQ.
 */
package src.main.java.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import src.main.java.model.Harmony;
import src.main.java.model.Keys;
import src.main.java.model.tables.records.PlatformsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Platforms extends TableImpl<PlatformsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>harmony.platforms</code>
     */
    public static final Platforms PLATFORMS = new Platforms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlatformsRecord> getRecordType() {
        return PlatformsRecord.class;
    }

    /**
     * The column <code>harmony.platforms.platformid</code>.
     */
    public final TableField<PlatformsRecord, Integer> PLATFORMID = createField(DSL.name("platformid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>harmony.platforms.platformName</code>.
     */
    public final TableField<PlatformsRecord, String> PLATFORMNAME = createField(DSL.name("platformName"), SQLDataType.VARCHAR(60).nullable(false), this, "");

    private Platforms(Name alias, Table<PlatformsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Platforms(Name alias, Table<PlatformsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>harmony.platforms</code> table reference
     */
    public Platforms(String alias) {
        this(DSL.name(alias), PLATFORMS);
    }

    /**
     * Create an aliased <code>harmony.platforms</code> table reference
     */
    public Platforms(Name alias) {
        this(alias, PLATFORMS);
    }

    /**
     * Create a <code>harmony.platforms</code> table reference
     */
    public Platforms() {
        this(DSL.name("platforms"), null);
    }

    public <O extends Record> Platforms(Table<O> child, ForeignKey<O, PlatformsRecord> key) {
        super(child, key, PLATFORMS);
    }

    @Override
    public Schema getSchema() {
        return Harmony.HARMONY;
    }

    @Override
    public Identity<PlatformsRecord, Integer> getIdentity() {
        return (Identity<PlatformsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlatformsRecord> getPrimaryKey() {
        return Keys.KEY_PLATFORMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PlatformsRecord>> getKeys() {
        return Arrays.<UniqueKey<PlatformsRecord>>asList(Keys.KEY_PLATFORMS_PRIMARY, Keys.KEY_PLATFORMS_PLATFORMID, Keys.KEY_PLATFORMS_PLATFORMNAME);
    }

    @Override
    public Platforms as(String alias) {
        return new Platforms(DSL.name(alias), this);
    }

    @Override
    public Platforms as(Name alias) {
        return new Platforms(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Platforms rename(String name) {
        return new Platforms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Platforms rename(Name name) {
        return new Platforms(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
