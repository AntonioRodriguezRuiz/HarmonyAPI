/*
 * This file is generated by jOOQ.
 */
package src.main.java.model.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import src.main.java.model.Harmony;
import src.main.java.model.Indexes;
import src.main.java.model.Keys;
import src.main.java.model.tables.records.ReviewlikesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reviewlikes extends TableImpl<ReviewlikesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>harmony.reviewlikes</code>
     */
    public static final Reviewlikes REVIEWLIKES = new Reviewlikes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewlikesRecord> getRecordType() {
        return ReviewlikesRecord.class;
    }

    /**
     * The column <code>harmony.reviewlikes.reviewlikeid</code>.
     */
    public final TableField<ReviewlikesRecord, Integer> REVIEWLIKEID = createField(DSL.name("reviewlikeid"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>harmony.reviewlikes.userid</code>.
     */
    public final TableField<ReviewlikesRecord, Integer> USERID = createField(DSL.name("userid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>harmony.reviewlikes.reviewid</code>.
     */
    public final TableField<ReviewlikesRecord, Integer> REVIEWID = createField(DSL.name("reviewid"), SQLDataType.INTEGER.nullable(false), this, "");

    private Reviewlikes(Name alias, Table<ReviewlikesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reviewlikes(Name alias, Table<ReviewlikesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>harmony.reviewlikes</code> table reference
     */
    public Reviewlikes(String alias) {
        this(DSL.name(alias), REVIEWLIKES);
    }

    /**
     * Create an aliased <code>harmony.reviewlikes</code> table reference
     */
    public Reviewlikes(Name alias) {
        this(alias, REVIEWLIKES);
    }

    /**
     * Create a <code>harmony.reviewlikes</code> table reference
     */
    public Reviewlikes() {
        this(DSL.name("reviewlikes"), null);
    }

    public <O extends Record> Reviewlikes(Table<O> child, ForeignKey<O, ReviewlikesRecord> key) {
        super(child, key, REVIEWLIKES);
    }

    @Override
    public Schema getSchema() {
        return Harmony.HARMONY;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REVIEWLIKES_REVIEWID);
    }

    @Override
    public Identity<ReviewlikesRecord, Integer> getIdentity() {
        return (Identity<ReviewlikesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReviewlikesRecord> getPrimaryKey() {
        return Keys.KEY_REVIEWLIKES_PRIMARY;
    }

    @Override
    public List<UniqueKey<ReviewlikesRecord>> getKeys() {
        return Arrays.<UniqueKey<ReviewlikesRecord>>asList(Keys.KEY_REVIEWLIKES_PRIMARY, Keys.KEY_REVIEWLIKES_ALREADYLIKED);
    }

    @Override
    public List<ForeignKey<ReviewlikesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReviewlikesRecord, ?>>asList(Keys.REVIEWLIKES_IBFK_1, Keys.REVIEWLIKES_IBFK_2);
    }

    private transient Users _users;
    private transient Reviews _reviews;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.REVIEWLIKES_IBFK_1);

        return _users;
    }

    public Reviews reviews() {
        if (_reviews == null)
            _reviews = new Reviews(this, Keys.REVIEWLIKES_IBFK_2);

        return _reviews;
    }

    @Override
    public Reviewlikes as(String alias) {
        return new Reviewlikes(DSL.name(alias), this);
    }

    @Override
    public Reviewlikes as(Name alias) {
        return new Reviewlikes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviewlikes rename(String name) {
        return new Reviewlikes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviewlikes rename(Name name) {
        return new Reviewlikes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
