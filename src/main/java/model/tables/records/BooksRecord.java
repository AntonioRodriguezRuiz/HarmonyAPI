/*
 * This file is generated by jOOQ.
 */
package src.main.java.model.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import src.main.java.model.tables.Books;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BooksRecord extends UpdatableRecordImpl<BooksRecord> implements Record4<Integer, Integer, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>harmony.books.bookid</code>.
     */
    public BooksRecord setBookid(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>harmony.books.bookid</code>.
     */
    public Integer getBookid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>harmony.books.mediaid</code>.
     */
    public BooksRecord setMediaid(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>harmony.books.mediaid</code>.
     */
    public Integer getMediaid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>harmony.books.collection</code>.
     */
    public BooksRecord setCollection(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>harmony.books.collection</code>.
     */
    public String getCollection() {
        return (String) get(2);
    }

    /**
     * Setter for <code>harmony.books.number</code>.
     */
    public BooksRecord setNumber(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>harmony.books.number</code>.
     */
    public Integer getNumber() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Books.BOOKS.BOOKID;
    }

    @Override
    public Field<Integer> field2() {
        return Books.BOOKS.MEDIAID;
    }

    @Override
    public Field<String> field3() {
        return Books.BOOKS.COLLECTION;
    }

    @Override
    public Field<Integer> field4() {
        return Books.BOOKS.NUMBER;
    }

    @Override
    public Integer component1() {
        return getBookid();
    }

    @Override
    public Integer component2() {
        return getMediaid();
    }

    @Override
    public String component3() {
        return getCollection();
    }

    @Override
    public Integer component4() {
        return getNumber();
    }

    @Override
    public Integer value1() {
        return getBookid();
    }

    @Override
    public Integer value2() {
        return getMediaid();
    }

    @Override
    public String value3() {
        return getCollection();
    }

    @Override
    public Integer value4() {
        return getNumber();
    }

    @Override
    public BooksRecord value1(Integer value) {
        setBookid(value);
        return this;
    }

    @Override
    public BooksRecord value2(Integer value) {
        setMediaid(value);
        return this;
    }

    @Override
    public BooksRecord value3(String value) {
        setCollection(value);
        return this;
    }

    @Override
    public BooksRecord value4(Integer value) {
        setNumber(value);
        return this;
    }

    @Override
    public BooksRecord values(Integer value1, Integer value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BooksRecord
     */
    public BooksRecord() {
        super(Books.BOOKS);
    }

    /**
     * Create a detached, initialised BooksRecord
     */
    public BooksRecord(Integer bookid, Integer mediaid, String collection, Integer number) {
        super(Books.BOOKS);

        setBookid(bookid);
        setMediaid(mediaid);
        setCollection(collection);
        setNumber(number);
    }
}
